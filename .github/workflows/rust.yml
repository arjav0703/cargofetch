name: Build & Publish Cargofetch

on:
  push:
    branches: [ "v1" ]
  pull_request:
    branches: [ "v1" ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  NIGHTLY_BUILD: 1

permissions:
  contents: write 
  id-token: write
  pull-requests: read

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        config:
        - name: Windows
          os: windows-latest
        - name: macOS
          os: macos-latest
        - name: Linux
          os: ubuntu-latest

    name: Build on ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Cache Cargo Registry and Builds
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Lint
      run: cargo clippy --verbose

    - name: Add x64 for macOS
      if: matrix.config.os == 'macos-latest'
      run: rustup target add x86_64-apple-darwin

    - name: Build Debug & Release
      run: |
        cargo build --verbose
        cargo build --release --verbose

    - name: Build Intel macOS slices
      if: matrix.config.os == 'macos-latest'
      run: |
        cargo build --verbose --target x86_64-apple-darwin
        cargo build --release --verbose --target x86_64-apple-darwin

    - name: Combine macOS slices
      if: matrix.config.os == 'macos-latest'
      run: |
        lipo -create \
          target/release/cargofetch \
          target/x86_64-apple-darwin/release/cargofetch \
          -output target/release/cargofetch-universal
        lipo -create \
          target/debug/cargofetch \
          target/x86_64-apple-darwin/debug/cargofetch \
          -output target/debug/cargofetch

    - name: Rename binaries for upload
      id: rename
      shell: bash
      run: |
        case "${{ matrix.config.os }}" in
          windows-latest)
            echo "debugfile=cargofetch-debug-v1.exe" >> $GITHUB_OUTPUT
            echo "releasefile=cargofetch-release-v1.exe" >> $GITHUB_OUTPUT
            mv target/debug/cargofetch.exe target/debug/${{ steps.rename.outputs.debugfile }}
            mv target/release/cargofetch.exe target/release/${{ steps.rename.outputs.releasefile }}
            ;;
          macos-latest)
            echo "debugfile=cargofetch-debug-v1-macos" >> $GITHUB_OUTPUT
            echo "releasefile=cargofetch-release-v1-macos" >> $GITHUB_OUTPUT
            mv target/release/cargofetch-universal target/release/${{ steps.rename.outputs.releasefile }}
            ;;
          ubuntu-latest)
            echo "debugfile=cargofetch-debug-v1-linux" >> $GITHUB_OUTPUT
            echo "releasefile=cargofetch-release-v1-linux" >> $GITHUB_OUTPUT
            mv target/debug/cargofetch target/debug/${{ steps.rename.outputs.debugfile }}
            mv target/release/cargofetch target/release/${{ steps.rename.outputs.releasefile }}
            ;;
        esac

    - name: Upload Debug artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.rename.outputs.debugfile }}
        path: target/debug/${{ steps.rename.outputs.debugfile }}

    - name: Upload Release artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.rename.outputs.releasefile }}
        path: target/release/${{ steps.rename.outputs.releasefile }}

  release:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/v1'   # only when pushing to v1 branch

    steps:
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create or Update Release v1
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: v1
        release_name: "v1"
        body: |
          ## Cargofetch v1
          This release was autogenerated by GitHub Actions.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ steps.rename.outputs.debugfile }}
        asset_name: ${{ steps.rename.outputs.debugfile }}
        asset_content_type: application/octet-stream

    - name: Upload Release Assets (release)
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ steps.rename.outputs.releasefile }}
        asset_name: ${{ steps.rename.outputs.releasefile }}
        asset_content_type: application/octet-stream
